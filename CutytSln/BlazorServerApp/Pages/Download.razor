@page "/download"

@using BlazorServerApp.Data
@using Cutyt.Core.Classes
@using System.Web
@using Cutyt.Core.Extensions
@using Cutyt.Core.Rebus.Replies
@using CutytKendoWeb.Models
@using System.Text.Json

@inject WatchService WatchService
@inject NavigationManager navManager
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime jsRuntime

@if (vm == null)
{
     <span class="sr-only">Loading...</span><div class="spinner-border" role="status">
       
    </div>
}
else
{
    <div class="text-center">
        <a rel="noreferrer" id="aDownload" href="@($"{navManager.BaseUri}mediaplayer?url={vm.Url.Base64StringEncode()}")" target="_blank">Click to preview and download</a>
    </div>
}

@code {
    YoutubeDownloadedFileInfo? vm = null;

    [Parameter]
    [SupplyParameterFromQuery(Name = "V")]
    public string V { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ytUrl")]
    public string YtUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "selectedOption")]
    public string SelectedOption { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "start")]
    public double Start { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "end")]
    public double End { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "downloadSwitchAudioAndVideo")]
    public double DownloadSwitchAudioAndVideo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isInitializedProp = jsRuntime.GetType().GetProperties().FirstOrDefault(f => f.Name == "IsInitialized");
        bool isJsInitialized = (bool)isInitializedProp.GetValue(jsRuntime);
        if (isJsInitialized == true)
        {
            var sr = ShouldRender();
            if (firstRender)
            {
                PostDataDownloadLinkViewModel postDataDownloadLinkViewModel = new PostDataDownloadLinkViewModel()
                    {
                        SelectedOption = SelectedOption,
                        Start = Start,
                        End = End,
                        YtUrl = YtUrl,
                        ShouldTrim = true,
                        V = V,
                        Ip = httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString()
                    };


                vm = await WatchService.GetDownloadLink(postDataDownloadLinkViewModel);
                firstRender = false;
            }
        }
    }

    bool firstRender = true;
}
